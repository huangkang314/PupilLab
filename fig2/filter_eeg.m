function filtered_data = filter_eeg(fs, eeg)

% design filter
% Hd_total.detla = designfilt('bandpassiir', 'FilterOrder', 2, 'HalfPowerFrequency1', 0.5, ...
%    'HalfPowerFrequency2', 3, 'DesignMethod', 'butter', 'SampleRate', fs);                        
% 
% Hd_total.theta = designfilt('bandpassiir', 'FilterOrder', 2, 'HalfPowerFrequency1', 3, ...
%     'HalfPowerFrequency2', 8, 'DesignMethod', 'butter', 'SampleRate', fs);
% 
% Hd_total.alpha = designfilt('bandpassiir', 'FilterOrder', 2, 'HalfPowerFrequency1', 8, ...
%     'HalfPowerFrequency2', 12, 'DesignMethod', 'butter', 'SampleRate', fs);
% 
% Hd_total.beta = designfilt('bandpassiir', 'FilterOrder', 2, 'HalfPowerFrequency1', 12, ...
%     'HalfPowerFrequency2', 30, 'DesignMethod', 'butter', 'SampleRate', fs);
% 
% Hd_total.gamma = designfilt('bandpassiir', 'FilterOrder', 2, 'HalfPowerFrequency1', 30, ...
%     'HalfPowerFrequency2', 80, 'DesignMethod', 'butter', 'SampleRate', fs);

Hd_total.detla = designfilt('bandpassfir', 'StopbandFrequency1', 0.3, ...
                            'PassbandFrequency1', 0.5, ...
                            'PassbandFrequency2', 3, ...
                            'StopbandFrequency2', 3.2, ...
                            'StopbandAttenuation1', 60, ...
                            'PassbandRipple', 1, ...
                            'StopbandAttenuation2', 60, 'SampleRate', ...
                            fs*1, 'DesignMethod', 'kaiserwin');

Hd_total.theta = designfilt('bandpassfir', 'StopbandFrequency1', 2.8, ...
                            'PassbandFrequency1', 3, ...
                            'PassbandFrequency2', 8, ...
                            'StopbandFrequency2', 8.2, ...
                            'StopbandAttenuation1', 60, ...
                            'PassbandRipple', 1, ...
                            'StopbandAttenuation2', 60, 'SampleRate', ...
                            fs*1, 'DesignMethod', 'kaiserwin');

Hd_total.alpha = designfilt('bandpassfir', 'StopbandFrequency1', 7.8, ...
                            'PassbandFrequency1', 8, ...
                            'PassbandFrequency2', 12, ...
                            'StopbandFrequency2', 12.2, ...
                            'StopbandAttenuation1', 60, ...
                            'PassbandRipple', 1, ...
                            'StopbandAttenuation2', 60, 'SampleRate', ...
                            fs*1, 'DesignMethod', 'kaiserwin');

Hd_total.beta = designfilt('bandpassfir', 'StopbandFrequency1', 11.8, ...
                            'PassbandFrequency1', 12, ...
                            'PassbandFrequency2', 30, ...
                            'StopbandFrequency2', 30.2, ...
                            'StopbandAttenuation1', 60, ...
                            'PassbandRipple', 1, ...
                            'StopbandAttenuation2', 60, 'SampleRate', ...
                            fs*1, 'DesignMethod', 'kaiserwin');

Hd_total.gamma = designfilt('bandpassfir', 'StopbandFrequency1', 29.8, ...
                            'PassbandFrequency1', 30, ...
                            'PassbandFrequency2', 80, ...
                            'StopbandFrequency2', 80.2, ...
                            'StopbandAttenuation1', 60, ...
                            'PassbandRipple', 1, ...
                            'StopbandAttenuation2', 60, 'SampleRate', ...
                            fs*1, 'DesignMethod', 'kaiserwin');

filtered_data = filter_chl(eeg', Hd_total, fs);

end

%% funtion of filtering
function dataout = filter_chl(data, Hd, Fs)

disp('filtering detla ...')
detla = filtfilt(Hd.detla, data);     % detla
disp('filtering theta ...')
theta = filtfilt(Hd.theta, data);     % theta
disp('filtering alpha ...')
alpha = filtfilt(Hd.alpha, data);     % alpha
disp('filtering beta ...')
beta = filtfilt(Hd.beta, data);     % beta
disp('filtering gamma ...')
gamma = filtfilt(Hd.gamma, data);     % gamma

% dataout.detla = detla(3 * Fs + 1: end - 3 * Fs);
% dataout.theta = theta(3 * Fs + 1: end - 3 * Fs);
% dataout.alpha = alpha(3 * Fs + 1: end - 3 * Fs);
% dataout.beta = beta(3 * Fs + 1: end - 3 * Fs);
% dataout.gamma = gamma(3 * Fs + 1: end - 3 * Fs);

dataout.detla = detla';
dataout.theta = theta';
dataout.alpha = alpha';
dataout.beta = beta';
dataout.gamma = gamma';

end
